{"version":3,"file":"wretch.js","sources":["../../src/mix.ts","../../src/config.ts","../../src/resolver.ts","../../src/wretcher.ts","../../src/index.ts"],"sourcesContent":["export const mix = function(one: object, two: object, mergeArrays: boolean = false) {\n    if(!one || !two || typeof one !== \"object\" || typeof two !== \"object\")\n        return one\n\n    const clone = { ...one }\n    for(const prop in two) {\n        if(two.hasOwnProperty(prop)) {\n            if(two[prop] instanceof Array && one[prop] instanceof Array) {\n                clone[prop] = mergeArrays ? [ ...one[prop], ...two[prop] ] : two[prop]\n            } else if(typeof two[prop] === \"object\" && typeof one[prop] === \"object\") {\n                clone[prop] = mix(one[prop], two[prop], mergeArrays)\n            } else {\n                clone[prop] = two[prop]\n            }\n        }\n    }\n\n    return clone\n}\n","export default {\n    // Default options\n    defaults: {},\n    // Error type\n    errorType: null\n}\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\n\nexport type WretcherError = Error & { status: number, response: Response, text?: string, json?: any }\n\nexport const resolver = url => (opts = {}) => {\n    const req = fetch(url, mix(conf.defaults, opts))\n    const wrapper: Promise<void | Response> = req.then(response => {\n        if (!response.ok) {\n            return response[conf.errorType || \"text\"]().then(_ => {\n                const err = new Error(_)\n                err[conf.errorType] = _\n                err[\"status\"] = response.status\n                err[\"response\"] = response\n                throw err\n            })\n        }\n        return response\n    })\n\n    type TypeParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Result>\n\n    const catchers = []\n    const doCatch = <T>(promise: Promise<T>): Promise<T> =>\n        catchers.reduce((accumulator, catcher) => accumulator.catch(catcher), promise)\n    const wrapTypeParser: TypeParser = <T>(funName) => <R>(cb) => funName ?\n        doCatch(wrapper.then(_ => _ && _[funName]()).then(_ => _ && cb && cb(_) || _)) :\n        doCatch(wrapper.then(_ => _ && cb && cb(_) || _))\n\n    const responseTypes: {\n        res: <Result = Response>(cb?: (type: void) => Result) => Promise<Result>,\n        json: <Result = {[key: string]: any}>(cb?: (type: {[key: string]: any}) => Result) => Promise<Result>,\n        blob: <Result = Blob>(cb?: (type: Blob) => Result) => Promise<Result>,\n        formData: <Result = FormData>(cb?: (type: FormData) => Result) => Promise<Result>,\n        arrayBuffer: <Result = ArrayBuffer>(cb?: (type: ArrayBuffer) => Result) => Promise<Result>,\n        text: <Result = string>(cb?: (type: string) => Result) => Promise<Result>,\n        error: (code: number, cb: any) => typeof responseTypes,\n        badRequest: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        unauthorized: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        forbidden: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        notFound: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        timeout: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        internalError: (cb: (error: WretcherError) => void) => typeof responseTypes\n    } = {\n        /**\n         * Retrieves the raw result as a promise.\n         */\n        res: wrapTypeParser<void>(null),\n        /**\n         * Retrieves the result as a parsed JSON object.\n         */\n        json: wrapTypeParser<any>(\"json\"),\n        /**\n         * Retrieves the result as a Blob object.\n         */\n        blob: wrapTypeParser<Blob>(\"blob\"),\n        /**\n         * Retrieves the result as a FormData object.\n         */\n        formData: wrapTypeParser<FormData>(\"formData\"),\n        /**\n         * Retrieves the result as an ArrayBuffer object.\n         */\n        arrayBuffer: wrapTypeParser<ArrayBuffer>(\"arrayBuffer\"),\n        /**\n         * Retrieves the result as a string.\n         */\n        text: wrapTypeParser<string>(\"text\"),\n        /**\n         * Catches an http response with a specific error code and performs a callback.\n         */\n        error(code: number, cb) {\n            catchers.push(err => {\n                if(err.status === code) cb(err)\n                else throw err\n            })\n            return responseTypes\n        },\n        /**\n         * Catches a bad request (http code 400) and performs a callback.\n         */\n        badRequest: cb => responseTypes.error(400, cb),\n        /**\n         * Catches an unauthorized request (http code 401) and performs a callback.\n         */\n        unauthorized: cb => responseTypes.error(401, cb),\n        /**\n         * Catches a forbidden request (http code 403) and performs a callback.\n         */\n        forbidden: cb => responseTypes.error(403, cb),\n        /**\n         * Catches a \"not found\" request (http code 404) and performs a callback.\n         */\n        notFound: cb => responseTypes.error(404, cb),\n        /**\n         * Catches a timeout (http code 408) and performs a callback.\n         */\n        timeout: cb => responseTypes.error(408, cb),\n        /**\n         * Catches an internal server error (http code 500) and performs a callback.\n         */\n        internalError: cb => responseTypes.error(500, cb)\n    }\n\n    return responseTypes\n}\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport {Â resolver } from \"./resolver\"\n\n/**\n * The Wretcher class used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretcher object.\n */\nexport class Wretcher {\n\n    constructor(\n        private _url: string,\n        private _options: RequestInit = {}) {}\n\n    /**\n     * Sets the default fetch options used for every subsequent fetch call.\n     * @param opts New default options\n     */\n    defaults(opts: RequestInit) {\n        conf.defaults = opts\n        return this\n    }\n\n    /**\n     * Mixins the default fetch options used for every subsequent fetch calls.\n     * @param opts Options to mixin with the current default options\n     */\n    mixdefaults(opts: RequestInit) {\n        conf.defaults = mix(conf.defaults, opts)\n        return this\n    }\n\n    /**\n     * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n     *\n     * Persists for every subsequent requests.\n     *\n     * Default is \"text\".\n     */\n    errorType(method: \"text\" | \"json\") {\n        conf.errorType = method\n        return this\n    }\n\n    /**\n     * Returns a new Wretcher object with the url specified and the same options.\n     * @param url String url\n     */\n    url(url: string) {\n        return new Wretcher(url, this._options)\n    }\n\n    /**\n     * Returns a wretch factory which, when called, creates a new Wretcher object with the base url as an url prefix.\n     * @param baseurl The base url\n     */\n    baseUrl(baseurl: string) {\n        return (url = \"\", opts: RequestInit = {}) => new Wretcher(baseurl + url, opts)\n    }\n\n    /**\n     * Returns a new Wretcher object with the same url and new options.\n     * @param options New options\n     */\n    options(options: RequestInit) {\n        return new Wretcher(this._url, options)\n    }\n\n    /**\n     * Converts a javascript object to query parameters,\n     * then appends this query string to the current url.\n     *\n     * ```\n     * let w = wretch(\"http://example.com\") // url is http://example.com\n     * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n     * ```\n     *\n     * @param qp An object which will be converted.\n     */\n    query(qp: object) {\n        return new Wretcher(appendQueryParams(this._url, qp), this._options)\n    }\n\n    /**\n     * Set request headers.\n     * @param headerValues An object containing header keys and values\n     */\n    headers(headerValues: { [headerName: string]: any }) {\n        return new Wretcher(this._url, mix(this._options, { headers: headerValues }))\n    }\n\n    /**\n     * Shortcut to set the \"Accept\" header.\n     * @param headerValue Header value\n     */\n    accept(headerValue: string) {\n        return this.headers({ Accept : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Content-Type\" header.\n     * @param headerValue Header value\n     */\n    content(headerValue: string) {\n        return this.headers({ \"Content-Type\" : headerValue })\n    }\n\n    /**\n     * Performs a get request.\n     */\n    get(opts = {}) {\n        return resolver(this._url)(mix(opts, this._options))\n    }\n    /**\n     * Performs a delete request.\n     */\n    delete(opts = {}) {\n        return resolver(this._url)({ ...mix(opts, this._options), method: \"DELETE\" })\n    }\n    /**\n     * Performs a put request.\n     */\n    put(opts = {}) {\n        return resolver(this._url)({ ...mix(opts, this._options), method: \"PUT\" })\n    }\n    /**\n     * Performs a post request.\n     */\n    post(opts = {}) {\n        return resolver(this._url)({ ...mix(opts, this._options), method: \"POST\" })\n    }\n    /**\n     * Performs a patch request.\n     */\n    patch(opts = {}) {\n        return resolver(this._url)({ ...mix(opts, this._options), method: \"PATCH\" })\n    }\n\n    /**\n     * Sets the request body with any content.\n     * @param contents The body contents\n     */\n    body(contents: any) {\n        return new Wretcher(this._url, { ...this._options, body: contents })\n    }\n    /**\n     * Sets the content type header, stringifies an object and sets the request body.\n     * @param jsObject An object which will be serialized into a JSON\n     */\n    json(jsObject: object) {\n        return this.content(\"application/json\").body(JSON.stringify(jsObject))\n    }\n    /**\n     * Converts the javascript object to a FormData and sets the request body.\n     * @param formObject An object which will be converted to a FormData\n     */\n    formData(formObject: object) {\n        const formData = new FormData()\n        for(const key in formObject) {\n            if(formObject[key] instanceof Array) {\n                for(const item of formObject[key])\n                    formData.append(key + \"[]\", item)\n            } else {\n                formData.append(key, formObject[key])\n            }\n        }\n\n        return this.body(formData)\n    }\n}\n\n// Internal helpers\n\nconst appendQueryParams = (url: string, qp: object) => {\n    const usp = new URLSearchParams()\n    const index = url.indexOf(\"?\")\n    for(const key in qp) {\n        if(qp[key] instanceof Array) {\n            for(const val of qp[key])\n                usp.append(key, val)\n        } else {\n            usp.append(key, qp[key])\n        }\n    }\n    return ~index ?\n        `${url.substring(0, index)}?${usp.toString()}` :\n        `${url}?${usp.toString()}`\n}\n","import { Wretcher } from \"./wretcher\"\n\n// URLSearchParams for node.js\ndeclare const global\ndeclare const require\nif(typeof self === \"undefined\") {\n    global.URLSearchParams = require(\"url\").URLSearchParams\n}\n\n/**\n * Return a fresh Wretcher instance.\n */\nexport default (url = \"\", opts: RequestInit = {}) => new Wretcher(url, opts)\n"],"names":["mix","one","two","mergeArrays","clone","prop","hasOwnProperty","Array","defaults","errorType","resolver","url","opts","wrapper","fetch","conf","then","response","ok","_","err","Error","status","catchers","doCatch","promise","reduce","accumulator","catcher","catch","wrapTypeParser","funName","cb","responseTypes","res","json","blob","formData","arrayBuffer","text","error","code","push","badRequest","unauthorized","forbidden","notFound","timeout","internalError","_url","_options","this","Wretcher","method","baseurl","options","qp","appendQueryParams","headerValues","headers","headerValue","Accept","Content-Type","contents","body","jsObject","content","JSON","stringify","formObject","FormData","key","_a","_i","item","append","usp","URLSearchParams","index","indexOf","val","substring","toString","self","global","require"],"mappings":"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"}