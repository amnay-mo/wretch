{"version":3,"file":"wretch.js","sources":["../../src/mix.ts","../../src/config.ts","../../src/resolver.ts","../../src/wretcher.ts","../../src/index.ts"],"sourcesContent":["export const mix = function(one: object, two: object, mergeArrays: boolean = false) {\n    if(!one || !two || typeof one !== \"object\" || typeof two !== \"object\")\n        return one\n\n    const clone = { ...one }\n    for(const prop in two) {\n        if(two.hasOwnProperty(prop)) {\n            if(two[prop] instanceof Array && one[prop] instanceof Array) {\n                clone[prop] = mergeArrays ? [ ...one[prop], ...two[prop] ] : two[prop]\n            } else if(typeof two[prop] === \"object\" && typeof one[prop] === \"object\") {\n                clone[prop] = mix(one[prop], two[prop], mergeArrays)\n            } else {\n                clone[prop] = two[prop]\n            }\n        }\n    }\n\n    return clone\n}\n","export default {\n    // Default options\n    defaults: {},\n    // Error type\n    errorType: null\n}\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\n\nexport type WretcherError = Error & { status: number, response: Response, text?: string, json?: any }\n\nexport const resolver = url => (catchers = []) => (opts = {}) => {\n    const req = fetch(url, mix(conf.defaults, opts))\n    const wrapper: Promise<void | Response> = req.then(response => {\n        if (!response.ok) {\n            return response[conf.errorType || \"text\"]().then(_ => {\n                const err = new Error(_)\n                err[conf.errorType] = _\n                err[\"status\"] = response.status\n                err[\"response\"] = response\n                throw err\n            })\n        }\n        return response\n    })\n\n    type TypeParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Result>\n\n    const doCatch = <T>(promise: Promise<T>): Promise<T> =>\n        catchers.reduce((accumulator, catcher) => accumulator.catch(catcher), promise)\n    const wrapTypeParser: TypeParser = <T>(funName) => <R>(cb) => funName ?\n        doCatch(wrapper.then(_ => _ && _[funName]()).then(_ => _ && cb && cb(_) || _)) :\n        doCatch(wrapper.then(_ => _ && cb && cb(_) || _))\n\n    const responseTypes: {\n        res: <Result = Response>(cb?: (type: void) => Result) => Promise<Result>,\n        json: <Result = {[key: string]: any}>(cb?: (type: {[key: string]: any}) => Result) => Promise<Result>,\n        blob: <Result = Blob>(cb?: (type: Blob) => Result) => Promise<Result>,\n        formData: <Result = FormData>(cb?: (type: FormData) => Result) => Promise<Result>,\n        arrayBuffer: <Result = ArrayBuffer>(cb?: (type: ArrayBuffer) => Result) => Promise<Result>,\n        text: <Result = string>(cb?: (type: string) => Result) => Promise<Result>,\n        error: (code: number, cb: any) => typeof responseTypes,\n        badRequest: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        unauthorized: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        forbidden: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        notFound: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        timeout: (cb: (error: WretcherError) => void) => typeof responseTypes,\n        internalError: (cb: (error: WretcherError) => void) => typeof responseTypes\n    } = {\n        /**\n         * Retrieves the raw result as a promise.\n         */\n        res: wrapTypeParser<void>(null),\n        /**\n         * Retrieves the result as a parsed JSON object.\n         */\n        json: wrapTypeParser<any>(\"json\"),\n        /**\n         * Retrieves the result as a Blob object.\n         */\n        blob: wrapTypeParser<Blob>(\"blob\"),\n        /**\n         * Retrieves the result as a FormData object.\n         */\n        formData: wrapTypeParser<FormData>(\"formData\"),\n        /**\n         * Retrieves the result as an ArrayBuffer object.\n         */\n        arrayBuffer: wrapTypeParser<ArrayBuffer>(\"arrayBuffer\"),\n        /**\n         * Retrieves the result as a string.\n         */\n        text: wrapTypeParser<string>(\"text\"),\n        /**\n         * Catches an http response with a specific error code and performs a callback.\n         */\n        error(code: number, cb) {\n            catchers.push(err => {\n                if(err.status === code) cb(err)\n                else throw err\n            })\n            return responseTypes\n        },\n        /**\n         * Catches a bad request (http code 400) and performs a callback.\n         */\n        badRequest: cb => responseTypes.error(400, cb),\n        /**\n         * Catches an unauthorized request (http code 401) and performs a callback.\n         */\n        unauthorized: cb => responseTypes.error(401, cb),\n        /**\n         * Catches a forbidden request (http code 403) and performs a callback.\n         */\n        forbidden: cb => responseTypes.error(403, cb),\n        /**\n         * Catches a \"not found\" request (http code 404) and performs a callback.\n         */\n        notFound: cb => responseTypes.error(404, cb),\n        /**\n         * Catches a timeout (http code 408) and performs a callback.\n         */\n        timeout: cb => responseTypes.error(408, cb),\n        /**\n         * Catches an internal server error (http code 500) and performs a callback.\n         */\n        internalError: cb => responseTypes.error(500, cb)\n    }\n\n    return responseTypes\n}\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport { resolver, WretcherError } from \"./resolver\"\n\n/**\n * The Wretcher class used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretcher object.\n */\nexport class Wretcher {\n\n    protected constructor(\n        private _url: string,\n        private _options: RequestInit = {},\n        private _catchers: Array<(error: WretcherError) => void> = []) {}\n\n    static factory(url = \"\", opts: RequestInit = {}) { return new Wretcher(url, opts, []) }\n    private selfFactory({ url = this._url, options = this._options, catchers = this._catchers } = {}) {\n        return new Wretcher(url, options, catchers)\n    }\n\n    /**\n     * Sets the default fetch options used for every subsequent fetch call.\n     * @param opts New default options\n     */\n    defaults(opts: RequestInit) {\n        conf.defaults = opts\n        return this\n    }\n\n    /**\n     * Mixins the default fetch options used for every subsequent fetch calls.\n     * @param opts Options to mixin with the current default options\n     */\n    mixdefaults(opts: RequestInit) {\n        conf.defaults = mix(conf.defaults, opts)\n        return this\n    }\n\n    /**\n     * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n     *\n     * Persists for every subsequent requests.\n     *\n     * Default is \"text\".\n     */\n    errorType(method: \"text\" | \"json\") {\n        conf.errorType = method\n        return this\n    }\n\n    /**\n     * Returns a new Wretcher object with the url specified and the same options.\n     * @param url String url\n     */\n    url(url: string) {\n        return this.selfFactory({ url })\n    }\n\n    /**\n     * Returns a wretch factory which, when called, creates a new Wretcher object with the base url as an url prefix.\n     * @param baseurl The base url\n     */\n    baseUrl(baseurl: string) {\n        return (url = \"\", opts: RequestInit = {}) =>\n            this.selfFactory({ url: baseurl + url, options: opts})\n    }\n\n    /**\n     * Returns a new Wretcher object with the same url and new options.\n     * @param options New options\n     */\n    options(options: RequestInit) {\n        return this.selfFactory({ options })\n    }\n\n    /**\n     * Converts a javascript object to query parameters,\n     * then appends this query string to the current url.\n     *\n     * ```\n     * let w = wretch(\"http://example.com\") // url is http://example.com\n     * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n     * ```\n     *\n     * @param qp An object which will be converted.\n     */\n    query(qp: object) {\n        return this.selfFactory({ url: appendQueryParams(this._url, qp) })\n    }\n\n    /**\n     * Set request headers.\n     * @param headerValues An object containing header keys and values\n     */\n    headers(headerValues: { [headerName: string]: any }) {\n        return this.selfFactory({ options: mix(this._options, { headers: headerValues }) })\n    }\n\n    /**\n     * Shortcut to set the \"Accept\" header.\n     * @param headerValue Header value\n     */\n    accept(headerValue: string) {\n        return this.headers({ Accept : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Content-Type\" header.\n     * @param headerValue Header value\n     */\n    content(headerValue: string) {\n        return this.headers({ \"Content-Type\" : headerValue })\n    }\n\n    /**\n     * Adds a default catcher which will be called on every subsequent request error when the error code matches.\n     * @param code Error code\n     * @param catcher: The catcher method\n     */\n    catcher(code: number, catcher: (error: WretcherError) => void) {\n        this._catchers.push(err => {\n            if(err.status === code) catcher(err)\n            else throw err\n        })\n        return this.selfFactory({ catchers: [ ...this._catchers,\n            err => {\n                if(err.status === code) catcher(err)\n                else throw err\n            }\n        ]})\n    }\n\n    /**\n     * Performs a get request.\n     */\n    get(opts = {}) {\n        return resolver(this._url)(this._catchers)(mix(opts, this._options))\n    }\n    /**\n     * Performs a delete request.\n     */\n    delete(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"DELETE\" })\n    }\n    /**\n     * Performs a put request.\n     */\n    put(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"PUT\" })\n    }\n    /**\n     * Performs a post request.\n     */\n    post(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"POST\" })\n    }\n    /**\n     * Performs a patch request.\n     */\n    patch(opts = {}) {\n        return resolver(this._url)(this._catchers)({ ...mix(opts, this._options), method: \"PATCH\" })\n    }\n\n    /**\n     * Sets the request body with any content.\n     * @param contents The body contents\n     */\n    body(contents: any) {\n        return this.selfFactory({ options: { ...this._options, body: contents }})\n    }\n    /**\n     * Sets the content type header, stringifies an object and sets the request body.\n     * @param jsObject An object which will be serialized into a JSON\n     */\n    json(jsObject: object) {\n        return this.content(\"application/json\").body(JSON.stringify(jsObject))\n    }\n    /**\n     * Converts the javascript object to a FormData and sets the request body.\n     * @param formObject An object which will be converted to a FormData\n     */\n    formData(formObject: object) {\n        const formData = new FormData()\n        for(const key in formObject) {\n            if(formObject[key] instanceof Array) {\n                for(const item of formObject[key])\n                    formData.append(key + \"[]\", item)\n            } else {\n                formData.append(key, formObject[key])\n            }\n        }\n\n        return this.body(formData)\n    }\n}\n\n// Internal helpers\n\nconst appendQueryParams = (url: string, qp: object) => {\n    const usp = new URLSearchParams()\n    const index = url.indexOf(\"?\")\n    for(const key in qp) {\n        if(qp[key] instanceof Array) {\n            for(const val of qp[key])\n                usp.append(key, val)\n        } else {\n            usp.append(key, qp[key])\n        }\n    }\n    return ~index ?\n        `${url.substring(0, index)}?${usp.toString()}` :\n        `${url}?${usp.toString()}`\n}\n","import { Wretcher } from \"./wretcher\"\n\n// URLSearchParams for node.js\ndeclare const global\ndeclare const require\nif(typeof self === \"undefined\") {\n    global.URLSearchParams = require(\"url\").URLSearchParams\n}\n\n/**\n * Return a fresh Wretcher instance.\n */\nexport default Wretcher.factory\n"],"names":["mix","one","two","mergeArrays","clone","prop","hasOwnProperty","Array","defaults","errorType","resolver","url","catchers","opts","wrapper","fetch","conf","then","response","ok","_","err","Error","status","doCatch","promise","reduce","accumulator","catcher","catch","wrapTypeParser","funName","cb","responseTypes","res","json","blob","formData","arrayBuffer","text","error","code","push","badRequest","unauthorized","forbidden","notFound","timeout","internalError","_url","_options","_catchers","this","Wretcher","_a","_b","_c","_d","options","_e","method","selfFactory","baseurl","_this","qp","appendQueryParams","headerValues","headers","headerValue","Accept","Content-Type","contents","body","jsObject","content","JSON","stringify","formObject","FormData","key","_i","item","append","usp","URLSearchParams","index","indexOf","val","substring","toString","self","global","require","factory"],"mappings":"0VAAO,IAAMA,EAAM,SAASC,EAAaC,EAAaC,GAClD,gBADkDA,OAC9CF,IAAQC,GAAsB,iBAARD,GAAmC,iBAARC,EACjD,OAAOD,EAEX,IAAMG,OAAaH,GACnB,IAAI,IAAMI,KAAQH,EACXA,EAAII,eAAeD,KACfH,EAAIG,aAAiBE,OAASN,EAAII,aAAiBE,MAClDH,EAAMC,GAAQF,EAAmBF,EAAII,UAAUH,EAAIG,IAAUH,EAAIG,GACtC,iBAAdH,EAAIG,IAA2C,iBAAdJ,EAAII,GAClDD,EAAMC,GAAQL,EAAIC,EAAII,GAAOH,EAAIG,GAAOF,GAExCC,EAAMC,GAAQH,EAAIG,IAK9B,OAAOD,MCfPI,YAEAC,UAAW,MCCFC,EAAW,SAAAC,GAAO,OAAA,SAACC,GAAkB,oBAAlBA,MAAkB,SAACC,gBAAAA,MAC/C,IACMC,EADMC,MAAMJ,EAAKX,EAAIgB,EAAKR,SAAUK,IACII,KAAK,SAAAC,GAC/C,OAAKA,EAASC,GASPD,EARIA,EAASF,EAAKP,WAAa,UAAUQ,KAAK,SAAAG,GAC7C,IAAMC,EAAM,IAAIC,MAAMF,GAItB,MAHAC,EAAIL,EAAKP,WAAaW,EACtBC,EAAY,OAAIH,EAASK,OACzBF,EAAc,SAAIH,EACZG,MAQZG,EAAU,SAAIC,GAChB,OAAAb,EAASc,OAAO,SAACC,EAAaC,GAAY,OAAAD,EAAYE,MAAMD,IAAUH,IACpEK,EAA6B,SAAIC,GAAY,OAAA,SAAIC,GAAO,OAC1DR,EAD0DO,EAClDjB,EAAQG,KAAK,SAAAG,GAAK,OAAAA,GAAKA,EAAEW,OAAYd,KAAK,SAAAG,GAAK,OAAAA,GAAKY,GAAMA,EAAGZ,IAAMA,IACnEN,EAAQG,KAAK,SAAAG,GAAK,OAAAA,GAAKY,GAAMA,EAAGZ,IAAMA,OAE5Ca,GAkBFC,IAAKJ,EAAqB,MAI1BK,KAAML,EAAoB,QAI1BM,KAAMN,EAAqB,QAI3BO,SAAUP,EAAyB,YAInCQ,YAAaR,EAA4B,eAIzCS,KAAMT,EAAuB,QAI7BU,eAAMC,EAAcT,GAKhB,OAJApB,EAAS8B,KAAK,SAAArB,GACV,GAAGA,EAAIE,SAAWkB,EACb,MAAMpB,EADaW,EAAGX,KAGxBY,GAKXU,WAAY,SAAAX,GAAM,OAAAC,EAAcO,MAAM,IAAKR,IAI3CY,aAAc,SAAAZ,GAAM,OAAAC,EAAcO,MAAM,IAAKR,IAI7Ca,UAAW,SAAAb,GAAM,OAAAC,EAAcO,MAAM,IAAKR,IAI1Cc,SAAU,SAAAd,GAAM,OAAAC,EAAcO,MAAM,IAAKR,IAIzCe,QAAS,SAAAf,GAAM,OAAAC,EAAcO,MAAM,IAAKR,IAIxCgB,cAAe,SAAAhB,GAAM,OAAAC,EAAcO,MAAM,IAAKR,KAGlD,OAAOC,kBC5FP,WACYgB,EACAC,EACAC,gBADAD,mBACAC,MAFAC,UAAAH,EACAG,cAAAF,EACAE,eAAAD,EAqLhB,OAnLWE,UAAP,SAAe1C,EAAUE,GAA0B,oBAApCF,mBAAUE,MAAiC,IAAIwC,EAAS1C,EAAKE,OACpEwC,wBAAR,SAAoBC,OAAAC,kBAAEC,QAAA7C,yBAAiB8C,YAAAC,6BAAyBC,aAC5D,OAAO,IAAIN,EAAS1C,EAAK+C,gCAO7BL,qBAAA,SAASxC,GAEL,OADAG,EAAKR,SAAWK,EACTuC,MAOXC,wBAAA,SAAYxC,GAER,OADAG,EAAKR,SAAWR,EAAIgB,EAAKR,SAAUK,GAC5BuC,MAUXC,sBAAA,SAAUO,GAEN,OADA5C,EAAKP,UAAYmD,EACVR,MAOXC,gBAAA,SAAI1C,GACA,OAAOyC,KAAKS,aAAclD,SAO9B0C,oBAAA,SAAQS,GAAR,WACI,OAAO,SAACnD,EAAUE,GACd,oBADIF,mBAAUE,MACdkD,EAAKF,aAAclD,IAAKmD,EAAUnD,EAAK+C,QAAS7C,MAOxDwC,oBAAA,SAAQK,GACJ,OAAON,KAAKS,aAAcH,aAc9BL,kBAAA,SAAMW,GACF,OAAOZ,KAAKS,aAAclD,IAAKsD,EAAkBb,KAAKH,KAAMe,MAOhEX,oBAAA,SAAQa,GACJ,OAAOd,KAAKS,aAAcH,QAAS1D,EAAIoD,KAAKF,UAAYiB,QAASD,OAOrEb,mBAAA,SAAOe,GACH,OAAOhB,KAAKe,SAAUE,OAASD,KAOnCf,oBAAA,SAAQe,GACJ,OAAOhB,KAAKe,SAAUG,eAAiBF,KAQ3Cf,oBAAA,SAAQZ,EAAcb,GAKlB,OAJAwB,KAAKD,UAAUT,KAAK,SAAArB,GAChB,GAAGA,EAAIE,SAAWkB,EACb,MAAMpB,EADaO,EAAQP,KAG7B+B,KAAKS,aAAcjD,SAAewC,KAAKD,kBAC1C,SAAA9B,GACI,GAAGA,EAAIE,SAAWkB,EACb,MAAMpB,EADaO,EAAQP,SAS5CgC,gBAAA,SAAIxC,GACA,oBADAA,MACOH,EAAS0C,KAAKH,KAAdvC,CAAoB0C,KAAKD,UAAzBzC,CAAoCV,EAAIa,EAAMuC,KAAKF,YAK9DG,mBAAA,SAAOxC,GACH,oBADGA,MACIH,EAAS0C,KAAKH,KAAdvC,CAAoB0C,KAAKD,UAAzBzC,MAAyCV,EAAIa,EAAMuC,KAAKF,WAAWU,OAAQ,aAKtFP,gBAAA,SAAIxC,GACA,oBADAA,MACOH,EAAS0C,KAAKH,KAAdvC,CAAoB0C,KAAKD,UAAzBzC,MAAyCV,EAAIa,EAAMuC,KAAKF,WAAWU,OAAQ,UAKtFP,iBAAA,SAAKxC,GACD,oBADCA,MACMH,EAAS0C,KAAKH,KAAdvC,CAAoB0C,KAAKD,UAAzBzC,MAAyCV,EAAIa,EAAMuC,KAAKF,WAAWU,OAAQ,WAKtFP,kBAAA,SAAMxC,GACF,oBADEA,MACKH,EAAS0C,KAAKH,KAAdvC,CAAoB0C,KAAKD,UAAzBzC,MAAyCV,EAAIa,EAAMuC,KAAKF,WAAWU,OAAQ,YAOtFP,iBAAA,SAAKkB,GACD,OAAOnB,KAAKS,aAAcH,aAAcN,KAAKF,UAAUsB,KAAMD,OAMjElB,iBAAA,SAAKoB,GACD,OAAOrB,KAAKsB,QAAQ,oBAAoBF,KAAKG,KAAKC,UAAUH,KAMhEpB,qBAAA,SAASwB,GACL,IAAMxC,EAAW,IAAIyC,SACrB,IAAI,IAAMC,KAAOF,EACb,GAAGA,EAAWE,aAAgBxE,MAC1B,IAAkB,QAAA+C,EAAAuB,EAAWE,GAAXC,WAAAA,KAAd,IAAMC,OACN5C,EAAS6C,OAAOH,EAAM,KAAME,QAEhC5C,EAAS6C,OAAOH,EAAKF,EAAWE,IAIxC,OAAO3B,KAAKoB,KAAKnC,SAMnB4B,EAAoB,SAACtD,EAAaqD,GACpC,IAAMmB,EAAM,IAAIC,gBACVC,EAAQ1E,EAAI2E,QAAQ,KAC1B,IAAI,IAAMP,KAAOf,EACb,GAAGA,EAAGe,aAAgBxE,MAClB,IAAiB,QAAA+C,EAAAU,EAAGe,GAAHC,WAAAA,KAAb,IAAMO,OACNJ,EAAID,OAAOH,EAAKQ,QAEpBJ,EAAID,OAAOH,EAAKf,EAAGe,IAG3B,OAAQM,EACD1E,EAAI6E,UAAU,EAAGH,OAAUF,EAAIM,WAC/B9E,MAAOwE,EAAIM,kBC/MH,oBAATC,OACNC,OAAOP,gBAAkBQ,QAAQ,OAAOR,iBAM7B/B,EAASwC"}